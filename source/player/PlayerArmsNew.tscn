[gd_scene load_steps=7 format=2]

[ext_resource path="res://assets/models/player/arms/wyh_player_arms.glb" type="PackedScene" id=1]

[sub_resource type="Shader" id=65]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;

const float PI = 3.1415926;

uniform float viewmodel_fov = 50.0f;

uniform vec4 albedo : hint_color = vec4(1.0f);
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular = 0.5f;
uniform float metallic = 1.0f;
uniform float roughness : hint_range(0,1) = 1.0f;
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_metallic : hint_white;
uniform vec4 metallic_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
uniform sampler2D texture_roughness : hint_white;
uniform vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
//uniform sampler2D texture_emission : hint_black_albedo;
//uniform vec4 emission : hint_color;
//uniform float emission_energy;
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16) = 0.5f;
uniform vec3 uv1_scale = vec3(1.0f);
uniform vec3 uv1_offset = vec3(0.0f);
uniform vec3 uv2_scale = vec3(1.0f);
uniform vec3 uv2_offset = vec3(0.0f);

void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;
	
	/* begin shader magic*/
	float onetanfov = 1.0f / tan(0.5f * (viewmodel_fov * PI / 180.0f));
	float aspect = VIEWPORT_SIZE.x / VIEWPORT_SIZE.y;
	// modify projection matrix
	PROJECTION_MATRIX[1][1] = onetanfov;
	PROJECTION_MATRIX[0][0] = onetanfov / aspect;
	// draws the viewmodel over everything (disable if you want dof near on viewmodel)
	POSITION = PROJECTION_MATRIX * MODELVIEW_MATRIX * vec4(VERTEX.xyz, 1.0);
	POSITION.z = mix(POSITION.z, 0, 0.999);
	/* end shader magic */
}

void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	albedo_tex *= COLOR;
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	NORMALMAP = texture(texture_normal,base_uv).rgb;
	NORMALMAP_DEPTH = normal_scale;
	//vec3 emission_tex = texture(texture_emission,base_uv).rgb;
	//EMISSION = (emission.rgb+emission_tex)*emission_energy;
}"

[sub_resource type="ShaderMaterial" id=66]
shader = SubResource( 65 )
shader_param/viewmodel_fov = 70.0
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.0
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 0.0
shader_param/metallic_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/roughness_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/normal_scale = 0.5
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=67]
shader = SubResource( 65 )
shader_param/viewmodel_fov = 70.0
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.0
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 0.0
shader_param/metallic_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/roughness_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/normal_scale = 0.5
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=68]
shader = SubResource( 65 )
shader_param/viewmodel_fov = 70.0
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.0
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 0.0
shader_param/metallic_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/roughness_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/normal_scale = 0.5
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=69]
shader = SubResource( 65 )
shader_param/viewmodel_fov = 70.0
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.0
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 0.0
shader_param/metallic_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/roughness_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/normal_scale = 0.5
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )

[node name="PlayerArms" instance=ExtResource( 1 )]

[node name="BoneAttachment" parent="Armature001/Skeleton" index="0"]
transform = Transform( -5.96047e-07, 1, -8.83745e-14, -1, -5.96046e-07, -1.10891e-07, -1.10891e-07, -6.14324e-15, 1, 0.7, 2.05, 5.71024e-08 )

[node name="arm2L" parent="Armature001/Skeleton/BoneAttachment" index="0"]
material/0 = SubResource( 66 )

[node name="BoneAttachment2" parent="Armature001/Skeleton" index="1"]
transform = Transform( 1.46569e-14, 1, 7.10543e-14, -1, 4.51308e-15, 8.31846e-09, 8.31846e-09, -9.9476e-14, 1, 0.3, 2.05, 5.71025e-08 )

[node name="arm1L" parent="Armature001/Skeleton/BoneAttachment2" index="0"]
material/0 = SubResource( 67 )

[node name="BoneAttachment3" parent="Armature001/Skeleton" index="2"]
transform = Transform( -5.96046e-07, -1, 5.99528e-14, 1, -5.96046e-07, -1.10891e-07, 1.10891e-07, 2.22785e-14, 1, -0.7, 2.05, 5.71025e-08 )

[node name="arm2R" parent="Armature001/Skeleton/BoneAttachment3" index="0"]
material/0 = SubResource( 68 )

[node name="BoneAttachment4" parent="Armature001/Skeleton" index="3"]
transform = Transform( -1.46569e-14, -1, -7.10543e-14, 1, -4.51307e-15, 8.31847e-09, -8.31847e-09, -4.26326e-14, 1, -0.3, 2.05, 5.71025e-08 )

[node name="arm1R" parent="Armature001/Skeleton/BoneAttachment4" index="0"]
material/0 = SubResource( 69 )
